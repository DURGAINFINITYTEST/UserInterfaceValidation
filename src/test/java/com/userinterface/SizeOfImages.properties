import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class ImagePage {
    private WebDriver driver;

    @FindBy(id = "imageElement")
    private WebElement imageElement;

    public ImagePage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

    public int getImageWidth() {
        return imageElement.getSize().getWidth();
    }

    public int getImageHeight() {
        return imageElement.getSize().getHeight();
    }
}


Step 2: Create Test Class


import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class ImageSizeTest {
    private WebDriver driver;
    private ImagePage imagePage;

    @BeforeClass
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        driver = new ChromeDriver();
        driver.get("your_application_url");
        imagePage = new ImagePage(driver);
    }

    @Test
    public void testImageSize() {
        int imageWidth = imagePage.getImageWidth();
        int imageHeight = imagePage.getImageHeight();

        // Perform validation based on the expected image size
        Assert.assertEquals(imageWidth, expectedWidth, "Image width is not as expected.");
        Assert.assertEquals(imageHeight, expectedHeight, "Image height is not as expected.");
    }

    // Add more test methods to validate the size of other images as needed

    @AfterClass
    public void tearDown() {
        driver.quit();
    }
}