import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class FormPage {
    private WebDriver driver;

    @FindBy(id = "disabledField")
    private WebElement disabledField;

    public FormPage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

    public boolean isFieldDisabled() {
        return !disabledField.isEnabled();
    }
}




Step 2: Create Test Class


import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class DisabledFieldTest {
    private WebDriver driver;
    private FormPage formPage;

    @BeforeClass
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        driver = new ChromeDriver();
        driver.get("your_application_url");
        formPage = new FormPage(driver);
    }

    @Test
    public void testDisabledField() {
        boolean isFieldDisabled = formPage.isFieldDisabled();
        Assert.assertTrue(isFieldDisabled, "Field is not disabled.");
    }

    // Add more test methods to validate disabled state of other fields as needed

    @AfterClass
    public void tearDown() {
        driver.quit();
    }
}
